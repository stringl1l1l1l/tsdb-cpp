CMAKE_MINIMUM_REQUIRED(VERSION 3.8)
CMAKE_POLICY(VERSION 3.8)

PROJECT(tsdb_cpp_client_demo)

AUX_SOURCE_DIRECTORY(. DIR_SRCS)

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
    LINK_LIBRARIES(gtest pthread)
    SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb")
    SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
ENDIF()

SET(CMAKE_BUILD_TYPE "Debug")
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED True)
SET(CMAKE_CXX_EXTENSIONS OFF)
SET(ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/lib")

FIND_PACKAGE(PkgConfig REQUIRED)

PKG_CHECK_MODULES(ZSTD REQUIRED libzstd)
PKG_CHECK_MODULES(YAML_CPP REQUIRED yaml-cpp)
INCLUDE_DIRECTORIES(${ZSTD_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${YAML_CPP_INCLUDE_DIRS})

FIND_PACKAGE(nlohmann_json REQUIRED)

ADD_LIBRARY(tsdb_cpp STATIC ${DIR_SRCS}) 
TARGET_INCLUDE_DIRECTORIES(tsdb_cpp PUBLIC ${PROJECT_SOURCE_DIR}/src)
TARGET_LINK_LIBRARIES(tsdb_cpp ${YAML_CPP_LIBRARIES} ${ZSTD_LIBRARIES} nlohmann_json::nlohmann_json)

FIND_LIBRARY(TSDB_CPP NAMES tsdb_cpp PATHS "${PROJECT_SOURCE_DIR}/lib" NO_DEFAULT_PATH)
ADD_EXECUTABLE(tsdb_cpp_client_demo main.cpp)
TARGET_LINK_LIBRARIES(tsdb_cpp_client_demo ${TSDB_CPP} ${ZSTD_LIBRARIES} ${YAML_CPP_LIBRARIES})
